name: Build CLI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'cli/**'
      - 'core/**'
      - 'api/**'
      - 'Cargo.*'
      - '.github/workflows/build-cli.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'cli/**'
      - 'core/**'
      - 'api/**'
      - 'Cargo.*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS (Intel)
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: securefox-macos-x64
            
          # macOS (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: securefox-macos-arm64
            
          # Linux (x64)
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: securefox-linux-x64
            
          # Linux (ARM64)
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: securefox-linux-arm64
            cross: true
            
          # Windows (x64)
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: securefox-windows-x64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以生成构建元数据

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross (for cross-compilation)
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-registry-

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-git-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-build-

      - name: Build with cross
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }} -p securefox-cli --features vendored-ssl

      - name: Build natively
        if: ${{ !matrix.cross }}
        run: cargo build --release --target ${{ matrix.target }} -p securefox-cli --features vendored-ssl

      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/securefox artifacts/
          chmod +x artifacts/securefox
          cd artifacts
          tar czf ${{ matrix.artifact_name }}.tar.gz securefox
          mv ${{ matrix.artifact_name }}.tar.gz ..

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\securefox.exe artifacts\
          cd artifacts
          7z a -tzip ..\${{ matrix.artifact_name }}.zip securefox.exe

      - name: Upload artifact (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.tar.gz
          retention-days: 30

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip
          retention-days: 30

  summary:
    name: Build Summary
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check build status
        run: |
          echo "Build completed for all platforms"
          echo "Artifacts are available for download"
