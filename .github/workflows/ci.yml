name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  merge_group:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  rust-check:
    name: Rust Check & Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ci-cache"
          cache-on-failure: true

      - name: Check code formatting
        run: |
          echo "::group::Checking code formatting"
          cargo fmt --all -- --check
          echo "::endgroup::"

      - name: Run clippy
        run: |
          echo "::group::Running clippy lints"
          cargo clippy --all-targets --all-features -- -D warnings
          echo "::endgroup::"

      - name: Run tests
        run: |
          echo "::group::Running tests"
          cargo test --all-features --workspace -- --nocapture
          echo "::endgroup::"

      - name: Check build
        run: |
          echo "::group::Checking build"
          cargo check --all-features --workspace
          echo "::endgroup::"

      - name: Generate test summary
        if: always()
        run: |
          echo "## Rust Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code formatting checked" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Clippy lints passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build verified" >> $GITHUB_STEP_SUMMARY

  extension-check:
    name: Extension Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: extension/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: extension
        run: pnpm install --frozen-lockfile

      - name: Type check
        working-directory: extension
        run: |
          echo "::group::TypeScript type checking"
          pnpm compile
          echo "::endgroup::"

      - name: Lint check
        working-directory: extension
        run: |
          echo "::group::ESLint checking"
          pnpm lint || true
          echo "::endgroup::"

      - name: Build check
        working-directory: extension
        run: |
          echo "::group::Building extension"
          pnpm build
          echo "::endgroup::"

      - name: Generate extension summary
        if: always()
        run: |
          echo "## Extension Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ TypeScript compilation checked" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Lint check completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build verified" >> $GITHUB_STEP_SUMMARY

  summary:
    name: CI Summary
    needs: [rust-check, extension-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check status
        run: |
          echo "## CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Rust Check: ${{ needs.rust-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Extension Check: ${{ needs.extension-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.rust-check.result }}" = "success" ] && [ "${{ needs.extension-check.result }}" = "success" ]; then
            echo "✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ Some checks failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
