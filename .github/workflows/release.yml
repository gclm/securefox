name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Call the reusable build workflow
  build:
    name: Build All Platforms
    uses: ./.github/workflows/build.yml
    with:
      upload-artifacts: true
      retention-days: 90

  create-release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec mv {} release/ \;
          ls -lah release/

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Get previous tag
        id: previous_tag
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          PREV_TAG=$(git tag --sort=-v:refname | grep -A1 "^${TAG}$" | tail -n1 || echo "")
          if [ -z "$PREV_TAG" ]; then
            # If no previous tag, use first commit
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT
          echo "Previous tag: $PREV_TAG"

      - name: Generate What's Changed
        id: changelog
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          PREV_TAG="${{ steps.previous_tag.outputs.previous_tag }}"
          
          echo "Generating changelog from $PREV_TAG to $TAG"
          
          # Create changelog file
          echo "" > changelog.md
          
          # Group commits by type
          FEATURES=$(git log $PREV_TAG..$TAG --pretty=format:"%s" --no-merges | grep -E "^feat:|^feature:" | sed 's/^feat: /- /' | sed 's/^feature: /- /' || true)
          FIXES=$(git log $PREV_TAG..$TAG --pretty=format:"%s" --no-merges | grep -E "^fix:|^bugfix:" | sed 's/^fix: /- /' | sed 's/^bugfix: /- /' || true)
          DOCS=$(git log $PREV_TAG..$TAG --pretty=format:"%s" --no-merges | grep -E "^docs:|^doc:" | sed 's/^docs: /- /' | sed 's/^doc: /- /' || true)
          REFACTOR=$(git log $PREV_TAG..$TAG --pretty=format:"%s" --no-merges | grep -E "^refactor:|^perf:|^style:" | sed 's/^refactor: /- /' | sed 's/^perf: /- /' | sed 's/^style: /- /' || true)
          OTHERS=$(git log $PREV_TAG..$TAG --pretty=format:"%s" --no-merges | grep -vE "^(feat|feature|fix|bugfix|docs|doc|refactor|perf|style|chore|release):" | sed 's/^/- /' || true)
          
          # Build changelog
          if [ ! -z "$FEATURES" ]; then
            echo "#### 🚀 Features" >> changelog.md
            echo "" >> changelog.md
            echo "$FEATURES" >> changelog.md
            echo "" >> changelog.md
          fi
          
          if [ ! -z "$FIXES" ]; then
            echo "#### 🐛 Bug Fixes" >> changelog.md
            echo "" >> changelog.md
            echo "$FIXES" >> changelog.md
            echo "" >> changelog.md
          fi
          
          if [ ! -z "$DOCS" ]; then
            echo "#### 📝 Documentation" >> changelog.md
            echo "" >> changelog.md
            echo "$DOCS" >> changelog.md
            echo "" >> changelog.md
          fi
          
          if [ ! -z "$REFACTOR" ]; then
            echo "#### ♻️ Code Refactoring" >> changelog.md
            echo "" >> changelog.md
            echo "$REFACTOR" >> changelog.md
            echo "" >> changelog.md
          fi
          
          if [ ! -z "$OTHERS" ]; then
            echo "#### 📦 Other Changes" >> changelog.md
            echo "" >> changelog.md
            echo "$OTHERS" >> changelog.md
            echo "" >> changelog.md
          fi
          
          # If no categorized changes, list all commits
          if [ ! -s changelog.md ]; then
            echo "#### 📦 Changes" >> changelog.md
            echo "" >> changelog.md
            git log $PREV_TAG..$TAG --pretty=format:"- %s" --no-merges >> changelog.md
            echo "" >> changelog.md
          fi
          
          cat changelog.md

      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          echo "## SecureFox ${TAG}" > release_notes.md
          echo "" >> release_notes.md
          
          echo "### ✨ What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          cat changelog.md >> release_notes.md
          
          echo "### 🚀 Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### CLI Binaries" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **macOS**" >> release_notes.md
          echo "  - [Intel (x64)](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-macos-x64.tar.gz)" >> release_notes.md
          echo "  - [Apple Silicon (ARM64)](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-macos-arm64.tar.gz)" >> release_notes.md
          echo "- **Linux**" >> release_notes.md
          echo "  - [x64](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-linux-x64.tar.gz)" >> release_notes.md
          echo "  - [ARM64](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-linux-arm64.tar.gz)" >> release_notes.md
          echo "- **Windows**" >> release_notes.md
          echo "  - [x64](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-windows-x64.zip)" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Browser Extensions" >> release_notes.md
          echo "" >> release_notes.md
          echo "- [Chrome Extension](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-extension-chrome.zip)" >> release_notes.md
          echo "- [Firefox Extension](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-extension-firefox.zip)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### 📦 Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# macOS / Linux" >> release_notes.md
          echo "tar -xzf securefox-*.tar.gz" >> release_notes.md
          echo "sudo mv securefox /usr/local/bin/" >> release_notes.md
          echo "securefox version" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "---" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.previous_tag.outputs.previous_tag }}...${TAG}" >> release_notes.md
          
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: SecureFox ${{ steps.tag.outputs.tag }}
          body_path: release_notes.md
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
