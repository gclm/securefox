name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-cli:
    name: Build CLI - ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: securefox-macos-x64
            
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: securefox-macos-arm64
            
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: securefox-linux-x64
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: securefox-linux-arm64
            cross: true
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: securefox-windows-x64
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-release-

      - name: Build with cross
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }} -p securefox-cli

      - name: Build natively
        if: ${{ !matrix.cross }}
        run: cargo build --release --target ${{ matrix.target }} -p securefox-cli

      - name: Prepare artifact (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/securefox artifacts/
          chmod +x artifacts/securefox
          cd artifacts
          tar czf ${{ matrix.artifact_name }}.tar.gz securefox
          mv ${{ matrix.artifact_name }}.tar.gz ..
          cd ..
          shasum -a 256 ${{ matrix.artifact_name }}.tar.gz > ${{ matrix.artifact_name }}.tar.gz.sha256

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\securefox.exe artifacts\
          cd artifacts
          7z a -tzip ..\${{ matrix.artifact_name }}.zip securefox.exe
          cd ..
          certutil -hashfile ${{ matrix.artifact_name }}.zip SHA256 > ${{ matrix.artifact_name }}.zip.sha256

      - name: Upload artifact (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.tar.gz
            ${{ matrix.artifact_name }}.tar.gz.sha256

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.artifact_name }}.zip
            ${{ matrix.artifact_name }}.zip.sha256

  build-extension:
    name: Build Extension - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [chrome, firefox]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: extension/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: extension
        run: pnpm install --frozen-lockfile

      - name: Build extension
        working-directory: extension
        run: |
          if [ "${{ matrix.browser }}" = "chrome" ]; then
            pnpm build
            pnpm zip
          else
            pnpm build:firefox
            pnpm zip:firefox
          fi

      - name: Prepare artifact
        working-directory: extension
        run: |
          mkdir -p ../artifacts
          if [ "${{ matrix.browser }}" = "chrome" ]; then
            mv .output/*.zip ../artifacts/securefox-extension-chrome.zip || true
          else
            mv .output/*.zip ../artifacts/securefox-extension-firefox.zip || true
          fi
          cd ../artifacts
          shasum -a 256 securefox-extension-${{ matrix.browser }}.zip > securefox-extension-${{ matrix.browser }}.zip.sha256

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: securefox-extension-${{ matrix.browser }}
          path: |
            artifacts/securefox-extension-${{ matrix.browser }}.zip
            artifacts/securefox-extension-${{ matrix.browser }}.zip.sha256

  create-release:
    name: Create Release
    needs: [build-cli, build-extension]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p release
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" \) -exec mv {} release/ \;
          ls -lah release/

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: notes
        run: |
          TAG="${{ steps.tag.outputs.tag }}"
          echo "## SecureFox ${TAG}" > release_notes.md
          echo "" >> release_notes.md
          echo "### ðŸš€ Downloads" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### CLI Binaries" >> release_notes.md
          echo "" >> release_notes.md
          echo "- **macOS**" >> release_notes.md
          echo "  - [Intel (x64)](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-macos-x64.tar.gz)" >> release_notes.md
          echo "  - [Apple Silicon (ARM64)](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-macos-arm64.tar.gz)" >> release_notes.md
          echo "- **Linux**" >> release_notes.md
          echo "  - [x64](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-linux-x64.tar.gz)" >> release_notes.md
          echo "  - [ARM64](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-linux-arm64.tar.gz)" >> release_notes.md
          echo "- **Windows**" >> release_notes.md
          echo "  - [x64](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-windows-x64.zip)" >> release_notes.md
          echo "" >> release_notes.md
          echo "#### Browser Extensions" >> release_notes.md
          echo "" >> release_notes.md
          echo "- [Chrome Extension](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-extension-chrome.zip)" >> release_notes.md
          echo "- [Firefox Extension](https://github.com/${{ github.repository }}/releases/download/${TAG}/securefox-extension-firefox.zip)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### ðŸ“¦ Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# macOS / Linux" >> release_notes.md
          echo "tar -xzf securefox-*.tar.gz" >> release_notes.md
          echo "sudo mv securefox /usr/local/bin/" >> release_notes.md
          echo "securefox version" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "### âœ¨ What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          echo "See commit history for details." >> release_notes.md
          cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: SecureFox ${{ steps.tag.outputs.tag }}
          body_path: release_notes.md
          files: release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
